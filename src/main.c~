//
// main.c
// (c) 2013 Ted Gerold (tgwaste)
//

#include "main.h"


// set the properties of the text layer
//
void set_layer(TextLayer *textlayer, GFont font)
{
	text_layer_set_text_alignment(textlayer, GTextAlignmentCenter);
	text_layer_set_text_color(textlayer, GColorBlack);
	text_layer_set_background_color(textlayer, GColorWhite);
	text_layer_set_font(textlayer, fonts_get_system_font(font));
	layer_add_child(window_layer, text_layer_get_layer(textlayer));
}


// my convenience function to draw text
//
void text(GContext *context, char *text, int fs, int align, int bg, int fg, GRect area)
{
	GFont font;
	GTextAlignment alignment;
	GColor background, foreground;

	font =
		fs == 14 ? FONT_KEY_GOTHIC_14_BOLD :
		fs == 17 ? FONT_KEY_GOTHIC_18 :
		fs == 18 ? FONT_KEY_GOTHIC_18_BOLD :
		fs == 23 ? FONT_KEY_GOTHIC_24 :
		fs == 24 ? FONT_KEY_GOTHIC_24_BOLD :
		fs == 28 ? FONT_KEY_GOTHIC_28_BOLD :
		fs == 49 ? FONT_KEY_ROBOTO_BOLD_SUBSET_49 :
		FONT_KEY_GOTHIC_14;

	alignment =
		align == 0 ? GTextAlignmentCenter :
		align == 1 ? GTextAlignmentLeft :
		GTextAlignmentRight;

	background = !bg ? GColorWhite : GColorBlack;
	foreground = !fg ? GColorWhite : GColorBlack;

	graphics_context_set_fill_color(context, background);
	graphics_fill_rect(context, area, 0, GCornersAll);
	graphics_context_set_text_color(context, foreground);

	graphics_draw_text(
		context,
		text,
		fonts_get_system_font(font),
		area,
		GTextOverflowModeWordWrap,
		alignment,
		NULL
	);
}


// handle every minute
//
void handle_minute(struct tm *tm, TimeUnits units_changed)
{
	layer_mark_dirty(window_layer);
}


// display handler
//
void display_handler(Layer *me, GContext *context)
{
/*
	char buffer[30];
	time_t now = time(NULL);
	struct tm *tm = localtime(&now);
*/

	light_enable(true);

	// settings.banner
	text_layer_set_text(bannerLayer, settings.banner);

/*
	strftime(buffer, sizeof(buffer), clock_is_24h_style() ? "%H:%M" : "%l:%M", tm);
	text(context, buffer, 49, 0, 1, 0, GRect(0,23,WIDTH,55));

	// settings.weekday
	strftime(buffer, sizeof(buffer), "%A", tm);

	if (settings.weekday)
		text(context, buffer, 18, 0, 1, 0, GRect(0,89,WIDTH,22));

	// settings.showdate
	strftime(buffer, sizeof(buffer), "%B %d", tm);

	if (settings.showdate)
		text(context, buffer, 18, 0, 1, 0, GRect(0,111,WIDTH,22));

	// settings.dropdown
	text(context, settings.dropdown, 18, 0, 1, 0, GRect(0,134,WIDTH,22));
*/
}


// initialize window
//
void init(void)
{
	window = window_create();
	window_set_fullscreen(window, true);
	window_stack_push(window, true);
	window_set_background_color(window, GColorBlack);

	window_layer = layer_create(layer_get_frame(window_get_root_layer(window)));
	layer_add_child(window_get_root_layer(window), window_layer);
	layer_set_update_proc(window_layer, display_handler);

	bannerLayer = text_layer_create(GRect(0,0,WIDTH,22));
	set_layer(bannerLayer, FONT_KEY_GOTHIC_18_BOLD);

	tick_timer_service_subscribe(MINUTE_UNIT, &handle_minute);
	persist_read_data(SAVEKEY_SETTINGS, &settings, sizeof(settings));

	APP_LOG(APP_LOG_LEVEL_DEBUG, "- JQuery Settings Example App -");
	APP_LOG(APP_LOG_LEVEL_DEBUG, "(c) 2013 Ted Gerold (tgwaste)");
	APP_LOG(APP_LOG_LEVEL_DEBUG, "App window ready [%p]", window);

	app_message_register_inbox_received(jsmsg);
	app_message_open(128,50); // in/out
}


// deinit the application
//
void deinit(void)
{
	persist_write_data(SAVEKEY_SETTINGS, &settings, sizeof(settings));
	tick_timer_service_unsubscribe();

	text_layer_destroy(bannerLayer);

	layer_destroy(window_layer);
	window_destroy(window);

	APP_LOG(APP_LOG_LEVEL_DEBUG, "App shutting down... Goodbye.");
}


// good ol main
//
int main(void)
{
	init();
	app_event_loop();
	deinit();
}


// get and process javascript message
//
void jsmsg(DictionaryIterator *iter, void *context)
{
	Tuple *banner = dict_find(iter, KEY_BANNER);

	if (banner) {
		snprintf(settings.banner, sizeof(settings.banner), "%.40s", dict_find(iter,KEY_BANNER)->value->cstring);

		if (!strcmp(dict_find(iter,KEY_WEEKDAY)->value->cstring,"y"))
			settings.weekday = 1;
		else
			settings.weekday = 0;

		settings.showdate = atoi(dict_find(iter,KEY_SHOWDATE)->value->cstring);
		snprintf(settings.dropdown, sizeof(settings.dropdown), "%.40s", dict_find(iter,KEY_DROPDOWN)->value->cstring);

		APP_LOG(APP_LOG_LEVEL_DEBUG, "banner: %s", settings.banner);
		APP_LOG(APP_LOG_LEVEL_DEBUG, "weekday: %d", settings.weekday);
		APP_LOG(APP_LOG_LEVEL_DEBUG, "showdate: %d", settings.showdate);
		APP_LOG(APP_LOG_LEVEL_DEBUG, "dropdown: %s", settings.dropdown);
	}

	banner = NULL;

	layer_mark_dirty(window_layer);
}

